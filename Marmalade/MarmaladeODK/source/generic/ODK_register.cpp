/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "ODK_autodefs.h"
#include "s3eEdk.h"
#include "ODK.h"
//Declarations of Init and Term functions
extern s3eResult ODKInit();
extern void ODKTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static int OuyaPlugin_getAxis_wrap(int deviceId, int axis)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_getAxis"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_getAxis, 2, deviceId, axis);
}

static bool OuyaPlugin_isPressed_wrap(int deviceId, int keyCode)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_isPressed"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_isPressed, 2, deviceId, keyCode);
}

static bool OuyaPlugin_isPressedDown_wrap(int deviceId, int keyCode)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_isPressedDown"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_isPressedDown, 2, deviceId, keyCode);
}

static bool OuyaPlugin_isPressedUp_wrap(int deviceId, int keyCode)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_isPressedUp"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_isPressedUp, 2, deviceId, keyCode);
}

static void OuyaPlugin_clearButtonStates_wrap()
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_clearButtonStates"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_clearButtonStates, 0);
}

static const char* OuyaPlugin_getDeviceName_wrap(int playerNum)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_getDeviceName"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_getDeviceName, 1, playerNum);
}

static void OuyaPlugin_initOuyaPlugin_wrap(const char* jsonData, s3eCallback onSuccess, s3eCallback onFailure)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_initOuyaPlugin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_initOuyaPlugin, 3, jsonData, onSuccess, onFailure);
}

static void OuyaPlugin_asyncOuyaRequestGamerInfo_wrap(s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_asyncOuyaRequestGamerInfo"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_asyncOuyaRequestGamerInfo, 3, onSuccess, onFailure, onCancel);
}

static void OuyaPlugin_asyncOuyaRequestProducts_wrap(const char* productsJson, s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_asyncOuyaRequestProducts"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_asyncOuyaRequestProducts, 4, productsJson, onSuccess, onFailure, onCancel);
}

static void OuyaPlugin_asyncOuyaRequestPurchase_wrap(const char* purchasable, s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_asyncOuyaRequestPurchase"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_asyncOuyaRequestPurchase, 4, purchasable, onSuccess, onFailure, onCancel);
}

static void OuyaPlugin_asyncOuyaRequestReceipts_wrap(s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_asyncOuyaRequestReceipts"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_asyncOuyaRequestReceipts, 3, onSuccess, onFailure, onCancel);
}

static int OuyaPlugin_JSONObject_Construct_wrap()
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_JSONObject_Construct"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_JSONObject_Construct, 0);
}

static void OuyaPlugin_JSONObject_Put_wrap(int jsonObject, const char* name, const char* value)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_JSONObject_Put"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_JSONObject_Put, 3, jsonObject, name, value);
}

static const char* OuyaPlugin_JSONObject_ToString_wrap(int jsonObject)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_JSONObject_ToString"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_JSONObject_ToString, 1, jsonObject);
}

static int OuyaPlugin_JSONArray_Construct_wrap()
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_JSONArray_Construct"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_JSONArray_Construct, 0);
}

static void OuyaPlugin_JSONArray_Put_wrap(int jsonArray, int index, int jsonObject)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_JSONArray_Put"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_JSONArray_Put, 3, jsonArray, index, jsonObject);
}

static const char* OuyaPlugin_JSONArray_ToString_wrap(int jsonArray)
{
    IwTrace(ODK_VERBOSE, ("calling ODK func on main thread: OuyaPlugin_JSONArray_ToString"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)OuyaPlugin_JSONArray_ToString, 1, jsonArray);
}

#define OuyaPlugin_getAxis OuyaPlugin_getAxis_wrap
#define OuyaPlugin_isPressed OuyaPlugin_isPressed_wrap
#define OuyaPlugin_isPressedDown OuyaPlugin_isPressedDown_wrap
#define OuyaPlugin_isPressedUp OuyaPlugin_isPressedUp_wrap
#define OuyaPlugin_clearButtonStates OuyaPlugin_clearButtonStates_wrap
#define OuyaPlugin_getDeviceName OuyaPlugin_getDeviceName_wrap
#define OuyaPlugin_initOuyaPlugin OuyaPlugin_initOuyaPlugin_wrap
#define OuyaPlugin_asyncOuyaRequestGamerInfo OuyaPlugin_asyncOuyaRequestGamerInfo_wrap
#define OuyaPlugin_asyncOuyaRequestProducts OuyaPlugin_asyncOuyaRequestProducts_wrap
#define OuyaPlugin_asyncOuyaRequestPurchase OuyaPlugin_asyncOuyaRequestPurchase_wrap
#define OuyaPlugin_asyncOuyaRequestReceipts OuyaPlugin_asyncOuyaRequestReceipts_wrap
#define OuyaPlugin_JSONObject_Construct OuyaPlugin_JSONObject_Construct_wrap
#define OuyaPlugin_JSONObject_Put OuyaPlugin_JSONObject_Put_wrap
#define OuyaPlugin_JSONObject_ToString OuyaPlugin_JSONObject_ToString_wrap
#define OuyaPlugin_JSONArray_Construct OuyaPlugin_JSONArray_Construct_wrap
#define OuyaPlugin_JSONArray_Put OuyaPlugin_JSONArray_Put_wrap
#define OuyaPlugin_JSONArray_ToString OuyaPlugin_JSONArray_ToString_wrap

#endif

void ODKRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[17];
    funcPtrs[0] = (void*)OuyaPlugin_getAxis;
    funcPtrs[1] = (void*)OuyaPlugin_isPressed;
    funcPtrs[2] = (void*)OuyaPlugin_isPressedDown;
    funcPtrs[3] = (void*)OuyaPlugin_isPressedUp;
    funcPtrs[4] = (void*)OuyaPlugin_clearButtonStates;
    funcPtrs[5] = (void*)OuyaPlugin_getDeviceName;
    funcPtrs[6] = (void*)OuyaPlugin_initOuyaPlugin;
    funcPtrs[7] = (void*)OuyaPlugin_asyncOuyaRequestGamerInfo;
    funcPtrs[8] = (void*)OuyaPlugin_asyncOuyaRequestProducts;
    funcPtrs[9] = (void*)OuyaPlugin_asyncOuyaRequestPurchase;
    funcPtrs[10] = (void*)OuyaPlugin_asyncOuyaRequestReceipts;
    funcPtrs[11] = (void*)OuyaPlugin_JSONObject_Construct;
    funcPtrs[12] = (void*)OuyaPlugin_JSONObject_Put;
    funcPtrs[13] = (void*)OuyaPlugin_JSONObject_ToString;
    funcPtrs[14] = (void*)OuyaPlugin_JSONArray_Construct;
    funcPtrs[15] = (void*)OuyaPlugin_JSONArray_Put;
    funcPtrs[16] = (void*)OuyaPlugin_JSONArray_ToString;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[17] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("ODK", funcPtrs, sizeof(funcPtrs), flags, ODKInit, ODKTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int ODKStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&ODKRegisterExt;
    return 0;
}

int g_ODKVal = ODKStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    ODKRegisterExt();
}
#endif

#endif
